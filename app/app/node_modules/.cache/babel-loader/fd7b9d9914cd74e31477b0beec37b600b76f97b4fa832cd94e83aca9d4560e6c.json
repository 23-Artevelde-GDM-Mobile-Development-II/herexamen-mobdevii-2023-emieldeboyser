{"ast":null,"code":"var _jsxFileName = \"/Users/emieldeboyser/Documents/0_School/2022-2023/Herexamens/MOBDEV 2/newWebshop/app/app/src/components/Global/Hero/hero.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"./hero.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hero = () => {\n  _s();\n  const [filter, setFilter] = useState({\n    forSale: false,\n    forRent: false,\n    region: \"\",\n    price: \"\",\n    propertyType: \"\",\n    bedrooms: \"\"\n  });\n  const [regionSuggestions, setRegionSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleFilterChange = e => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = e.target;\n    const newValue = type === \"checkbox\" ? checked : value;\n    setFilter(prevFilter => ({\n      ...prevFilter,\n      [name]: newValue\n    }));\n  };\n  const handleSearch = () => {\n    // Process the filter criteria and navigate to another page\n    console.log(filter);\n  };\n  const imageUrl = \"/hero.jpg\";\n  useEffect(() => {\n    const fetchRegionSuggestions = async () => {\n      try {\n        setLoading(true);\n        // Replace the following code with your logic to fetch region suggestions from the database\n        // give me the right fetch url\n        const response = await fetch(process.env.REACT_APP_API_URL + \"/gemeentes\");\n        console.log(response);\n        const data = await response.json();\n        setRegionSuggestions(data); // Update region suggestions based on the fetched data\n      } catch (error) {\n        console.error(\"Error fetching region suggestions:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchRegionSuggestions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"hero\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 10\n  }, this);\n};\n_s(Hero, \"2Jo3sRCqDtsNxLJnydtC1Cw9HK8=\");\n_c = Hero;\nexport default Hero;\nvar _c;\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Hero","_s","filter","setFilter","forSale","forRent","region","price","propertyType","bedrooms","regionSuggestions","setRegionSuggestions","loading","setLoading","handleFilterChange","e","name","value","type","checked","target","newValue","prevFilter","handleSearch","console","log","imageUrl","fetchRegionSuggestions","response","fetch","process","env","REACT_APP_API_URL","data","json","error","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/emieldeboyser/Documents/0_School/2022-2023/Herexamens/MOBDEV 2/newWebshop/app/app/src/components/Global/Hero/hero.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./hero.css\";\n\nconst Hero = () => {\n  const [filter, setFilter] = useState({\n    forSale: false,\n    forRent: false,\n    region: \"\",\n    price: \"\",\n    propertyType: \"\",\n    bedrooms: \"\",\n  });\n\n  const [regionSuggestions, setRegionSuggestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleFilterChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const newValue = type === \"checkbox\" ? checked : value;\n    setFilter((prevFilter) => ({ ...prevFilter, [name]: newValue }));\n  };\n\n  const handleSearch = () => {\n    // Process the filter criteria and navigate to another page\n    console.log(filter);\n  };\n\n  const imageUrl = \"/hero.jpg\";\n\n  useEffect(() => {\n    const fetchRegionSuggestions = async () => {\n      try {\n        setLoading(true);\n        // Replace the following code with your logic to fetch region suggestions from the database\n        // give me the right fetch url\n        const response = await fetch(\n          process.env.REACT_APP_API_URL + \"/gemeentes\"\n        );\n        console.log(response);\n        const data = await response.json();\n        setRegionSuggestions(data); // Update region suggestions based on the fetched data\n      } catch (error) {\n        console.error(\"Error fetching region suggestions:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchRegionSuggestions();\n  }, []);\n\n  return <div className=\"hero\"></div>;\n};\n\nexport default Hero;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC;IACnCQ,OAAO,EAAE,KAAK;IACdC,OAAO,EAAE,KAAK;IACdC,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMkB,kBAAkB,GAAIC,CAAC,IAAK;IAChC,MAAM;MAAEC,IAAI;MAAEC,KAAK;MAAEC,IAAI;MAAEC;IAAQ,CAAC,GAAGJ,CAAC,CAACK,MAAM;IAC/C,MAAMC,QAAQ,GAAGH,IAAI,KAAK,UAAU,GAAGC,OAAO,GAAGF,KAAK;IACtDd,SAAS,CAAEmB,UAAU,KAAM;MAAE,GAAGA,UAAU;MAAE,CAACN,IAAI,GAAGK;IAAS,CAAC,CAAC,CAAC;EAClE,CAAC;EAED,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAC,OAAO,CAACC,GAAG,CAACvB,MAAM,CAAC;EACrB,CAAC;EAED,MAAMwB,QAAQ,GAAG,WAAW;EAE5B7B,SAAS,CAAC,MAAM;IACd,MAAM8B,sBAAsB,GAAG,MAAAA,CAAA,KAAY;MACzC,IAAI;QACFd,UAAU,CAAC,IAAI,CAAC;QAChB;QACA;QACA,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAC1BC,OAAO,CAACC,GAAG,CAACC,iBAAiB,GAAG,YAClC,CAAC;QACDR,OAAO,CAACC,GAAG,CAACG,QAAQ,CAAC;QACrB,MAAMK,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCvB,oBAAoB,CAACsB,IAAI,CAAC,CAAC,CAAC;MAC9B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdX,OAAO,CAACW,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D,CAAC,SAAS;QACRtB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDc,sBAAsB,CAAC,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAO5B,OAAA;IAAKqC,SAAS,EAAC;EAAM;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACrC,CAAC;AAACvC,EAAA,CAjDID,IAAI;AAAAyC,EAAA,GAAJzC,IAAI;AAmDV,eAAeA,IAAI;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}