{"ast":null,"code":"var _s = $RefreshSig$();\n// Importing useState and the custom hooks for authentication and handling API errors\nimport { useState } from \"react\";\nimport { useAuthContext } from \"../contexts/AuthContainer\";\nimport { handleErrors } from \"../helpers/api\";\nconst useMutation = () => {\n  _s();\n  // Getting the user authentication data from the context API\n  const auth = useAuthContext();\n  // Initializing the state variables for loading and errors\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  // This function is responsible for making an API call with the given url and options\n  const mutate = async (url, options = {}) => {\n    // Set the loading state to true\n    setIsLoading(true);\n\n    // Setting the headers for the request\n    const headers = {\n      accept: \"application/json\",\n      \"content-type\": \"application/json\"\n    };\n\n    // Only add the user authentication data to headers if it exists\n    if (auth && auth.user) {\n      headers.Authorization = `Bearer ${auth.user.token}`;\n    }\n    try {\n      var _options$method, _options$data;\n      // Making a fetch call with the given url and options, including the headers\n      const result = await fetch(url, {\n        method: (_options$method = options.method) !== null && _options$method !== void 0 ? _options$method : \"POST\",\n        headers: headers,\n        body: JSON.stringify((_options$data = options.data) !== null && _options$data !== void 0 ? _options$data : {})\n      });\n\n      // Handling errors in the response using the handleErrors function\n      const data = await handleErrors(result);\n\n      // If there's a success callback, call it with the response data, otherwise set loading state to false\n      if (options.onSuccess) {\n        options.onSuccess(data);\n      } else {\n        setIsLoading(false);\n      }\n    } catch (error) {\n      let errorData;\n      try {\n        const tempData = await error.json();\n        errorData = tempData.error;\n      } catch (ex) {\n        errorData = error.statusText;\n      }\n      // If there's an error callback, call it with the error, otherwise set the error state and loading state to false\n      if (options.onError) {\n        options.onError(error);\n      } else {\n        setIsLoading(false);\n        setError(String(errorData));\n      }\n    }\n  };\n\n  // Returning the loading state, error state, and the mutate function to make API calls\n  return {\n    isLoading,\n    error,\n    mutate\n  };\n};\n\n// Exporting the useMutation hook\n_s(useMutation, \"fQIkv6Hj/O4P/WYpw7o3peEXWQ4=\", false, function () {\n  return [useAuthContext];\n});\nexport default useMutation;","map":{"version":3,"names":["useState","useAuthContext","handleErrors","useMutation","_s","auth","isLoading","setIsLoading","error","setError","mutate","url","options","headers","accept","user","Authorization","token","_options$method","_options$data","result","fetch","method","body","JSON","stringify","data","onSuccess","errorData","tempData","json","ex","statusText","onError","String"],"sources":["/Users/emieldeboyser/Documents/0_School/2022-2023/Herexamens/MOBDEV 2/newWebshop/app/app/src/hooks/useMutation.js"],"sourcesContent":["// Importing useState and the custom hooks for authentication and handling API errors\nimport { useState } from \"react\";\nimport { useAuthContext } from \"../contexts/AuthContainer\";\nimport { handleErrors } from \"../helpers/api\";\n\nconst useMutation = () => {\n  // Getting the user authentication data from the context API\n  const auth = useAuthContext();\n  // Initializing the state variables for loading and errors\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n\n  // This function is responsible for making an API call with the given url and options\n  const mutate = async (url, options = {}) => {\n    // Set the loading state to true\n    setIsLoading(true);\n\n    // Setting the headers for the request\n    const headers = {\n      accept: \"application/json\",\n      \"content-type\": \"application/json\",\n    };\n\n    // Only add the user authentication data to headers if it exists\n    if (auth && auth.user) {\n      headers.Authorization = `Bearer ${auth.user.token}`;\n    }\n\n    try {\n      // Making a fetch call with the given url and options, including the headers\n      const result = await fetch(url, {\n        method: options.method ?? \"POST\",\n        headers: headers,\n        body: JSON.stringify(options.data ?? {}),\n      });\n\n      // Handling errors in the response using the handleErrors function\n      const data = await handleErrors(result);\n\n      // If there's a success callback, call it with the response data, otherwise set loading state to false\n      if (options.onSuccess) {\n        options.onSuccess(data);\n      } else {\n        setIsLoading(false);\n      }\n    } catch (error) {\n      let errorData;\n      try{\n        const tempData = await error.json();\n        errorData = tempData.error\n      } catch (ex) {\n        errorData = error.statusText;\n      }\n      // If there's an error callback, call it with the error, otherwise set the error state and loading state to false\n      if (options.onError) {\n        options.onError(error);\n      } else {\n        setIsLoading(false);\n        setError(String(errorData));\n      }\n    }\n  };\n\n  // Returning the loading state, error state, and the mutate function to make API calls\n  return {\n    isLoading,\n    error,\n    mutate,\n  };\n};\n\n// Exporting the useMutation hook\nexport default useMutation;\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,YAAY,QAAQ,gBAAgB;AAE7C,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA,MAAMC,IAAI,GAAGJ,cAAc,CAAC,CAAC;EAC7B;EACA,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,CAAC;;EAEpC;EACA,MAAMU,MAAM,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC1C;IACAL,YAAY,CAAC,IAAI,CAAC;;IAElB;IACA,MAAMM,OAAO,GAAG;MACdC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;;IAED;IACA,IAAIT,IAAI,IAAIA,IAAI,CAACU,IAAI,EAAE;MACrBF,OAAO,CAACG,aAAa,GAAI,UAASX,IAAI,CAACU,IAAI,CAACE,KAAM,EAAC;IACrD;IAEA,IAAI;MAAA,IAAAC,eAAA,EAAAC,aAAA;MACF;MACA,MAAMC,MAAM,GAAG,MAAMC,KAAK,CAACV,GAAG,EAAE;QAC9BW,MAAM,GAAAJ,eAAA,GAAEN,OAAO,CAACU,MAAM,cAAAJ,eAAA,cAAAA,eAAA,GAAI,MAAM;QAChCL,OAAO,EAAEA,OAAO;QAChBU,IAAI,EAAEC,IAAI,CAACC,SAAS,EAAAN,aAAA,GAACP,OAAO,CAACc,IAAI,cAAAP,aAAA,cAAAA,aAAA,GAAI,CAAC,CAAC;MACzC,CAAC,CAAC;;MAEF;MACA,MAAMO,IAAI,GAAG,MAAMxB,YAAY,CAACkB,MAAM,CAAC;;MAEvC;MACA,IAAIR,OAAO,CAACe,SAAS,EAAE;QACrBf,OAAO,CAACe,SAAS,CAACD,IAAI,CAAC;MACzB,CAAC,MAAM;QACLnB,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,IAAIoB,SAAS;MACb,IAAG;QACD,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAC,CAAC;QACnCF,SAAS,GAAGC,QAAQ,CAACrB,KAAK;MAC5B,CAAC,CAAC,OAAOuB,EAAE,EAAE;QACXH,SAAS,GAAGpB,KAAK,CAACwB,UAAU;MAC9B;MACA;MACA,IAAIpB,OAAO,CAACqB,OAAO,EAAE;QACnBrB,OAAO,CAACqB,OAAO,CAACzB,KAAK,CAAC;MACxB,CAAC,MAAM;QACLD,YAAY,CAAC,KAAK,CAAC;QACnBE,QAAQ,CAACyB,MAAM,CAACN,SAAS,CAAC,CAAC;MAC7B;IACF;EACF,CAAC;;EAED;EACA,OAAO;IACLtB,SAAS;IACTE,KAAK;IACLE;EACF,CAAC;AACH,CAAC;;AAED;AAAAN,EAAA,CAlEMD,WAAW;EAAA,QAEFF,cAAc;AAAA;AAiE7B,eAAeE,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}